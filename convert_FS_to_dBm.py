#############################################################################################
#   Creative Commons Attribution Non Commercial Share Alike 4.0 International
#   CC-BY-NC-SA-4.0
#   https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode
#   https://github.com/christiankrizan/Quantum-computing-using-IMP-Presto/blob/master/LICENSE
#############################################################################################

import os
import h5py
import numpy as np
from numpy import hanning as von_hann
from math import isnan
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
from smoothener import filter_and_interpolate

assert 1 == 0, "Remember that long drives have marker data attached to them. Remember that there is an output marker command."

def convert_into_dBm(
    time_vector,
    fetched_data_arr
    ):
    ''' Based on the conversion table file, generated by the tutorial
        in this file, convert the input raw FS data into dBm.
        
        TODO Verify the following print error.
        "Error! +str 65 100 100 32 115 110 97 114 107 121 32 99 111 109 109 101 110 116 32 105 110 32 116 104 101 32 100 101 115 99 114 105 112 116 105 111 110 32 97 98 111 118 101 32 97 98 111 117 116 32 104 111 119 32 97 108 108 101 114 103 105 99 10 112 104 121 115 105 99 105 115 116 115 32 97 114 101 32 116 111 32 70 83 32 97 110 100 32 104 111 119 32 116 104 105 115 32 101 110 116 105 114 101 32 99 114 105 109 101 32 97 103 97 105 110 115 116 32 104 117 109 97 110 105 116 121 10 115 104 105 116 115 104 111 119 32 99 111 117 108 100 32 104 97 118 101 32 98 101 101 110 32 97 118 111 105 100 101 100 32 105 102 32 111 110 108 121 32 73 77 80 32 111 110 108 121 32 109 101 97 115 117 114 101 100 32 112 111 119 101 114 115 10 111 110 32 116 104 101 105 114 32 111 119 110 32 102 117 99 107 105 110 103 32 100 101 118 105 99 101 46"
    '''
    raise NotImplementedError("TODO, HALTED! Remove the time_vector input argument to this function, it's currently an argument because of a shoddy debug mode.")
    # Figure out the data structure of the provided data.
    # Format should be: [(repeats * stores), (channels stored?), (time points)]
    structure_format = fetched_data_arr.shape
    for ii in range(structure_format[0]):
        for jj in range(structure_format[1]):
            # Grab time trace for the specific repeat * store iteration.
            trace = np.abs(fetched_data_arr[ii][jj][:])
            
            ## TODO DEBUG
            plt.plot(time_vector, trace, color="#034da3")
            plt.title('TODO Resonator spectroscopy')
            plt.ylabel('TODO Demodulated amplitude [FS]')
            plt.xlabel('TODO Stimulus tone frequency [Hz]')
            plt.show(block=True)
            ## /TODO DEBUG
            
            
    ## Load the conversion file.
        ## If no conversion file, tell user to run NAME_OF_DEF and follow the instructions.
    ## 
    
    
    return data_converted_to_dBm


def check_if_FS_to_dBm_file_exists(
    root_folder,
    overwrite_old_FS_to_dBm_file_if_it_exists = False
    ):
    ''' Check whether there already is an FS to dBm conversion file.
    '''
    
    #TODO
    #path_to_conversion_file TODO
    
    file_exists = False
    ## DO CHECK TODO
    #    file_exists = True
    
    if ((not overwrite_old_FS_to_dBm_file_if_it_exists) and file_exists):
        raise OSError("Error! There is already an FS to dBm conversion table (file) located at \""+str(path_to_conversion_file)+"\" - but the overwrite flag was set to False. Cannot proceed; consider allowing to overwrite the file, or manually deleting it.")
    
    return file_exists